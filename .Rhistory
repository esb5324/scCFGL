getwd()
library(roxygen2)
devtools::document()
devtools::document()
devtools::check()
getwd()
devtools::install()
sccfgl()
?sccfgl
library(huge)
source("JGNsc_simulation_functions.R")
source("scripts/JGNsc_simulation_functions.R")
num_reps=1 # how many "repetitions" of simulations to run
true_graph_m=1 # controls the number of edges in the ground truth network
rdseed <- 200 # controls the seed
nsample = 300 # number of cells
sim_list <- c(1) # What simulation settings to run? options: 1-5 for 2-condition settings, 1-2 for 3-condition settings
a_3=9
b_3=2.5
## 2 Conditions
str_list <- list("Identical S, Identical W", "Diff S, Identical W", "Diff S, Identical W", "Diff S, Identical W", "Change Weights")
diffblk_list <- list(NULL, list(7:8,7:8), list(5:8,5:8), list(3:8,3:8), NULL)
nivec.list.diff <- list(nivec= rep(25,8),nivec2 = rep(25,8))
for (i in sim_list){
str = str_list[[i]]
diffblk = diffblk_list[[i]]
tnet <- lapply(1:num_reps,c)
simu_data <- lapply(1:num_reps,c)
scrmats.true <- lapply(1:num_reps,c)
for (rep in 1:num_reps){
cormt <- list()
pcsmt <- list()
pij <- list()
theta <- list()
set.seed(rdseed*rep) # sets a different seed for each repetition
tempout <-  generateSigmaList(
nivec.list = nivec.list.diff, structure = str, diffblk = diffblk, blk_runif_threshold=edge_threshold, true_net="power_law", pos_def="diagplus1", add_m=true_graph_m)
sigma.list.1 <- tempout$sigma.list
# Create a list of count matrices
countlist.1 <- getCountList(sigma.list = sigma.list.1, nvec = rep(nsample,2), a3=a_3, b3=b_3) # for higher, 47, a3=0.95 and b3=1.6, default is 3 1 i think
theta <- lapply(countlist.1, function(c) c$thetaj)
cormt <- lapply(countlist.1, function(c) c$sigma)
pcsmt <- lapply(countlist.1, function(c) c$precision)
adjt <- tempout$adj.list
pij <- lapply(countlist.1, function(c) c$pij)
for (index in 1:length(theta)){
pcsmt[[index]][abs(pcsmt[[index]])<1e-8]=0
}
if (length(theta)==2){
# true screening matrix is 1 if the absolute difference between the true precision matrices is < the threshold, 0 otherwise
scrmats.true[[rep]] <- abs(pcsmt[[1]]-pcsmt[[2]])<0.01
} else if (length(theta)==3){
scrmats.true[[rep]] <- lapply(1:3,c)
# true screening matrix is 1 if the absolute difference between the true precision matrices is < the threshold, 0 otherwise
scrmats.true[[rep]][[1]] <- abs(pcsmt[[1]]-pcsmt[[2]])<0.01
scrmats.true[[rep]][[2]] <- abs(pcsmt[[1]]-pcsmt[[3]])<0.01
scrmats.true[[rep]][[3]] <- abs(pcsmt[[2]]-pcsmt[[3]])<0.01
}
simu_data[[rep]] <- lapply(1:length(countlist.1), function(i) huge.npn(countlist.1[[i]]$count))
simu_data[[rep]] <- lapply(simu_data[[rep]], function(c) apply(c, 2, function(g) g - min(g))) # make min value 0 ## ?
observed.list <- list(t(countlist.1[[1]]$count), t(countlist.1[[2]]$count))
# find and remove columns that have one unique value, 0
const_cols <- c()
for (condit in 1:length(simu_data[[rep]])){
if (sum(simu_data[[rep]][[condit]] > 20) > 0){
print("warning: abnormally large values in simulated data, condition:")
print(condit)
print("max value:")
print(max(simu_data[[rep]][[condit]]))
q()
}
zero_cols <- sum(apply(simu_data[[rep]][[condit]], 2, function(c) length(unique(c))==1))
if (zero_cols > 0){
print(paste0("condition:", condit))
print(paste0("number of constant columns: ", zero_cols))
const_cols <- c(const_cols, which(apply(simu_data[[rep]][[condit]], 2, function(c) length(unique(c))==1)))
}
}
if (length(const_cols) > 0){
print("REMOVING CONSTANT COLUMNS IN ALL CONDITIONS")
const_cols <- unique(const_cols)
print("indices of const_cols:"); print(const_cols)
simu_data[[rep]] <- lapply(simu_data[[rep]], function(m) m[,-(const_cols)])
pcsmt <- lapply(pcsmt, function(m) m[-(const_cols),-(const_cols)])
cormt <- lapply(cormt, function(m) m[-(const_cols),-(const_cols)])
adjt <- lapply(adjt, function(m) m[-(const_cols),-(const_cols)])
scrmats.true[[rep]] <- scrmats.true[[rep]][-(const_cols),-(const_cols)] # why did we have to change this???
countlist.drop <- lapply(countlist.1, function(c) c$count[,-(const_cols)])
} else{
countlist.drop <- lapply(countlist.1, function(c) c$count)
}
tnet[[rep]]$pcsm <- pcsmt
tnet[[rep]]$corm <- cormt
tnet[[rep]]$matA <- adjt
tnet[[rep]]$pij <- pij
tnet[[rep]]$theta <- theta
}
save(file=paste("simu_data_", i, ".RData",sep=""),
a_3, b_3, simu_data, tnet, scrmats.true, nivec.list.diff, str, diffblk, rdseed)
}
list.files()
l<- c(1) # the simulation settings you want to run graphs with. Note that the files must be labeled as "simu_res_1.RData" for S1, for example
library(pracma)
source("scripts/functions_analysis.R")
source("scripts/functions_simulation_analysis.R")
auc <- data.frame()
for (s in l){
nets_res(s)
load(paste0("simu_res_", s, ".RData"))
if (lda[[2]][[1]]!=lda[[2]][[2]] | lda[[2]][[1]] != lda[[2]][[3]] | lda[[2]][[2]] != lda[[2]][[3]]){
print("For these simulation graphs, the lambda2 values of all methods (CFGL, CFGL-r, CFGL-rp) must be equal")
q()
}
cbpalette <- c("#999999", "#56B4E9", "#009E73", "#CC79A7")
for (i in 1:length(lda[[2]][[1]])) { # for each lambda2
ROC_data_sub <- ROC_data[(ROC_data$lda2==lda[[2]][[1]][i] | ROC_data$method=="scLink"),]
ROC_data_sc <- ROC_data[ROC_data$method == "scLink",]
temp <- data.frame(setting=s, lda2=lda[[2]][[1]][i], method = "scLink", AUPRC=trapz(ROC_data_sc$TPR, ROC_data_sc$precision), AUROC=trapz(ROC_data_sc$FPR, ROC_data_sc$TPR))
auc <- rbind(auc, temp); rm(temp)
ROC_data_C <- ROC_data_sub[ROC_data_sub$method=="CFGL",]
temp <- data.frame(setting=s, lda2=lda[[2]][[1]][i], method = "CFGL", AUPRC=trapz(ROC_data_C$TPR, ROC_data_C$precision), AUROC=trapz(ROC_data_C$FPR, ROC_data_C$TPR))
auc <- rbind(auc, temp); rm(temp)
ROC_data_Cr <- ROC_data_sub[ROC_data_sub$method=="CFGL-r",]
temp <- data.frame(setting=s, lda2=lda[[2]][[1]][i], method = "CFGL-r", AUPRC=trapz(ROC_data_Cr$TPR, ROC_data_Cr$precision), AUROC=trapz(ROC_data_Cr$FPR, ROC_data_Cr$TPR))
auc <- rbind(auc, temp); rm(temp)
ROC_data_Crp <- ROC_data_sub[ROC_data_sub$method=="CFGL-rp",]
temp <- data.frame(setting=s, lda2=lda[[2]][[1]][i], method = "CFGL-rp", AUPRC=trapz(ROC_data_Crp$TPR, ROC_data_Crp$precision), AUROC=trapz(ROC_data_Crp$FPR, ROC_data_Crp$TPR))
auc <- rbind(auc, temp); rm(temp)
# each graph is for a particular lambda2, and contains points for different lambda1's
assign(paste0("S", s, "_PR_", lda[[2]][[1]][i]), ggplot(ROC_data_sub,aes(TPR, precision, color=method))
+ geom_line(linewidth=2,linetype=1)
+ coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + labs(x = NULL, y = NULL)
+ scale_color_manual(values=cbpalette)
+ theme(legend.position = "none")
)
assign(paste0("S", s, "_ROC_", lda[[2]][[1]][i]), ggplot(ROC_data_sub, aes(FPR, TPR, color = method))
+geom_line(linewidth=2,linetype=1) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + labs(x = NULL, y = NULL)
+ scale_color_manual(values=cbpalette)
+ theme(legend.position = "none")
)
}
rm(ROC_data)
}
source("functions_networks.R")
getwd()
source("R/functions_networks.R")
source("R/CFGL_functions.R")
source("R/scLink_functions.R")
# choose one of the two blocks of code or write your own
load("simu_data_1.RData") # run make_simulation_data.R first
mynorm <- simu_data
mytxt <- "1" # ex: If running S1 of the simulations, can use mytxt = "1" to indicate this
run_nets(SM=NA, n_cores=20, data_mat=mynorm,
scLink_lda=list(c(0.09), c(0.08), c(0.18)), CFGL_lda1=c(0.03), CFGLr_lda1=c(0.04), CFGLrp_lda1=c(0.06),
CFGL_lda2=0.01, CFGLr_lda2=0.01, CFGLrp_lda2=0.01, txt="1")
run_nets(SM=NA, n_cores=20, data_mat=mynorm,
scLink_lda=list(c(0.09), c(0.08), c(0.18)), CFGL_lda1=c(0.03), CFGLr_lda1=c(0.04), CFGLrp_lda1=c(0.06),
CFGL_lda2=0.01, CFGLr_lda2=0.01, CFGLrp_lda2=0.01, txt="1")
source("R/functions_networks.R")
run_nets(SM=NA, n_cores=20, data_mat=mynorm,
scLink_lda=list(c(0.09), c(0.08), c(0.18)), CFGL_lda1=c(0.03), CFGLr_lda1=c(0.04), CFGLrp_lda1=c(0.06),
CFGL_lda2=0.01, CFGLr_lda2=0.01, CFGLrp_lda2=0.01, txt="1")
source("R/functions_networks.R")
run_nets(SM=NA, n_cores=20, data_mat=mynorm,
scLink_lda=list(c(0.09), c(0.08), c(0.18)), CFGL_lda1=c(0.03), CFGLr_lda1=c(0.04), CFGLrp_lda1=c(0.06),
CFGL_lda2=0.01, CFGLr_lda2=0.01, CFGLrp_lda2=0.01, txt="1")
